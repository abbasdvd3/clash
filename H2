# mihomo 配置
# 日期：2024-05-21 00:38:30
# 配置作者：https://t.me/iKeLee
# 适用版本：所有使用 mihomo 核心的程序
port: 7890
socks-port: 7891
mixed-port: 7892
redir-port: 7893
tproxy-port: 7894
# mixed-port: 7890
# tproxy-port: 7891

unified-delay: true
geo-auto-update: true
geo-update-interval: 24
tcp-concurrent: true
find-process-mode: strict
global-client-fingerprint: chrome

allow-lan: true
mode: rule
log-level: info
ipv6: true
udp: true

external-controller: 0.0.0.0:9090
# external-ui: ui
# external-ui-url: 'https://github.com/MetaCubeX/metacubexd/archive/refs/heads/gh-pages.zip'

geox-url:
  geoip: "https://raw.githubusercontent.com/Chocolate4U/Iran-v2ray-rules/release/geoip.dat"
  geosite: "https://raw.githubusercontent.com/Chocolate4U/Iran-v2ray-rules/release/geosite.dat"
  mmdb: "https://raw.githubusercontent.com/Chocolate4U/Iran-clash-rules/release/geoip.metadb"
  asn: "https://raw.githubusercontent.com/Chocolate4U/Iran-v2ray-rules/geolite2/GeoLite2-ASN.mmdb"

profile:
  store-selected: true
  store-fake-ip: true

sniffer:
  enable: true
  force-dns-mapping: true
  parse-pure-ip: true
  override-destination: true
  sniff:
    HTTP:
      ports: [80, 8080-8880]
      override-destination: true
    TLS:
      ports: [443, 8443]
    QUIC:
      ports: [443, 8443]
  force-domain:
    - +.v2ex.com

  skip-domain:
    - Mijia Cloud

tun:
  enable: true
  stack: system
  dns-hijack:
    - any:53
  auto-route: true
  auto-detect-interface: true

dns:
  enable: true
  listen: 0.0.0.0:1053
  ipv6: true
  enhanced-mode: fake-ip
  fake-ip-range: 28.0.0.1/8
  fake-ip-filter:
    - "*"
    - +.lan
  default-nameserver:
    - 223.5.5.5
    - 223.6.6.6
  nameserver:
    - https://223.5.5.5/dns-query#h3=true
    - https://223.6.6.6/dns-query#h3=true

# 锚点 - 节点订阅的参数 [每小时更新一次订阅节点，每 6 秒一次健康检查]
NodeParam: &NodeParam {type: http, interval: 3600, health-check: {enable: true, url: 'http://cp.cloudflare.com', interval: 6}}

# 锚点 - 节点订阅
proxy-providers: 
  机场名称1:
    url: 'https://raw.githubusercontent.com/abbasdvd3/clash/main/hamrah.yaml'
    <<: *NodeParam
    path: 'proxy_provider/机场名称1.yaml'
#    override:
 #     additional-prefix: "[机场名称1] " # 为订阅节点添加机场名称前缀
  机场名称2:
    url: 'https://chromego-sub.netlify.app/sub/merged_proxies_new.yaml'
    <<: *NodeParam
    path: 'proxy_provider/机场名称2.yaml'
  #  override:
  #    additional-prefix: "[机场名称2] " # 为订阅节点添加机场名称前缀

# 锚点 - 节点筛选组
FilterHK: &FilterHK '^(?=.*((?i)🇭🇰|香港|(\b(HK|Hong)\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
FilterTW: &FilterTW '^(?=.*((?i)🇹🇼|台湾|(\b(TW|Tai|Taiwan)\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
FilterJP: &FilterJP '^(?=.*((?i)🇯🇵|日本|川日|东京|大阪|泉日|埼玉|(\b(JP|Japan)\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
FilterKR: &FilterKR '^(?=.*((?i)🇰🇷|韩国|韓|首尔|(\b(KR|Korea)\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
FilterSG: &FilterSG '^(?=.*((?i)🇸🇬|新加坡|狮|(\b(SG|Singapore)\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
FilterUS: &FilterUS '^(?=.*((?i)🇺🇸|美国|波特兰|达拉斯|俄勒冈|凤凰城|费利蒙|硅谷|拉斯维加斯|洛杉矶|圣何塞|圣克拉拉|西雅图|芝加哥|(\b(US|United States)\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
FilterUK: &FilterUK '^(?=.*((?i)🇬🇧|英国|伦敦|(\b(UK|United Kingdom)\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
FilterFR: &FilterFR '^(?=.*((?i)🇫🇷|法国|(\b(FR|France)\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
FilterDE: &FilterDE '^(?=.*((?i)🇩🇪|德国|(\b(DE|Germany)\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
FilterGame: &FilterGame '^(?=.*((?i)游戏|🎮|(\b(GAME)\b)))(?!.*((?i)回国|校园)).*$'
FilterAll: &FilterAll '^(?=.*(.))(?!.*((?i)群|邀请|返利|循环|官网|客服|网站|网址|获取|订阅|流量|到期|机场|下次|版本|官址|备用|过期|已用|联系|邮箱|工单|贩卖|通知|倒卖|防止|国内|地址|频道|无法|说明|使用|提示|特别|访问|支持|教程|关注|更新|作者|加入|(\b(USE|USED|TOTAL|EXPIRE|EMAIL|Panel|Channel|Author)\b|(\d{4}-\d{2}-\d{2}|\d+G)))).*$'

# 策略组参数锚点
# 锚点 - 时延优选参数 [每 6 秒一次惰性健康检查，容差 20ms，时延超过 2 秒判定为失败，失败 3 次则自动触发健康检查]
UrlTest: &UrlTest {type: url-test, interval: 6, tolerance: 20, lazy: true, url: 'http://cp.cloudflare.com', disable-udp: false, timeout: 2000, max-failed-times: 3, hidden: true, include-all: true}
# 锚点 - 故障转移参数 [每 6 秒一次惰性健康检查，时延超过 2 秒判定为失败，失败 3 次则自动触发健康检查]
FallBack: &FallBack {type: fallback, interval: 6, lazy: true, url: 'http://cp.cloudflare.com', disable-udp: false, timeout: 2000, max-failed-times: 3, hidden: true, include-all: true}
# 锚点 - 负载均衡参数 [每 6 秒一次惰性健康检查，时延超过 2 秒判定为失败，失败 3 次则自动触发健康检查]
LoadBalance: &LoadBalance {type: load-balance, interval: 6, lazy: true, url: 'http://cp.cloudflare.com', disable-udp: false, strategy: consistent-hashing, timeout: 2000, max-failed-times: 3, hidden: true, include-all: true}
# 锚点 - 规则参数 [每小时更新一次订阅规则，更新规则时使用直连策略]
RuleSet: &RuleSet {type: http, behavior: classical, interval: 3600, format: yaml, proxy: DIRECT}

# 策略组
proxy-groups: 
  - {name: 游戏选择, type: select, include-all: true, filter: *FilterGame, proxies: [line, 全球选择]}
  - {name: 全球选择, type: url-test, include-all: true, filter: *FilterAll}
  - {name: 境外下载, type: select, include-all: true, filter: *FilterAll, proxies: [全球选择]}
  - {name: AI, type: url-test, include-all: true, filter: *FilterAll}
  - {name: TikTok, type: url-test, include-all: true, filter: *FilterAll}
  - {name: Telegram, type: url-test, proxies: [Hong Kong, Taiwan, Japan, Korean, New country, US, UK, French, German]}
  - {name: App Store, type: url-test, proxies: [Hong Kong, Taiwan, Japan, Korean, New country, US, UK, French, German]}
  - {name: Apple ID, type: url-test, proxies: [Hong Kong, Taiwan, Japan, Korean, New country, US, UK, French, German]}
  - {name: TestFlight, type: url-test, proxies: [Hong Kong, Taiwan, Japan, Korean, New country, US, UK, French, German]}
  - {name: 1Password, type: url-test, proxies: [Hong Kong, Taiwan, Japan, Korean, New country, US, UK, French, German]}
  - {name: Microsoft, type: url-test, proxies: [Hong Kong, Taiwan, Japan, Korean, New country, US, UK, French, German]}
  - {name: Netflix, type: url-test, proxies: [Hong Kong, Taiwan, Japan, Korean, New country, US, UK, French, German]}
  - {name: Emby, type: url-test, proxies: [Hong Kong, Taiwan, Japan, Korean, New country, US, UK, French, German]}
  - {name: line, type: select, proxies: [Taiwan, Japan, Korean, New country, US, UK, French, German, Hong Kong]}

  - {name: Hong Kong, type: url-test, proxies: [⏱Hong Kong, 🚥Hong Kong, 🎛Hong Kong]}
  - {name: Taiwan, type: url-test, proxies: [⏱Taiwan, 🚥Taiwan, 🎛Taiwan]}
  - {name: Japan, type: url-test, proxies: [⏱Japan, 🚥Japan, 🎛Japan]}
  - {name: Korean, type: url-test, proxies: [⏱Korean, 🚥Korean, 🎛Korean]}
  - {name: New country, type: url-test, proxies: [⏱New country, 🚥New country, 🎛New country]}
  - {name: US, type: url-test, proxies: [⏱US, 🚥US, 🎛US]}
  - {name: UK, type: url-test, proxies: [⏱UK, 🚥UK, 🎛UK]}
  - {name: French, type: url-test, proxies: [⏱French, 🚥French, 🎛French]}
  - {name: German, type: url-test, proxies: [⏱German, 🚥German, 🎛German]}

# 时延优选策略组
  - {name: ⏱Hong Kong, <<: *UrlTest, filter: *FilterHK}
  - {name: ⏱Taiwan, <<: *UrlTest, filter: *FilterTW}
  - {name: ⏱Japan, <<: *UrlTest, filter: *FilterJP}
  - {name: ⏱Korean, <<: *UrlTest, filter: *FilterKR}
  - {name: ⏱New country, <<: *UrlTest, filter: *FilterSG}
  - {name: ⏱US, <<: *UrlTest, filter: *FilterUS}
  - {name: ⏱UK, <<: *UrlTest, filter: *FilterUK}
  - {name: ⏱French, <<: *UrlTest, filter: *FilterFR}
  - {name: ⏱German, <<: *UrlTest, filter: *FilterDE}

# 故障转移策略组
  - {name: 🚥Hong Kong, <<: *FallBack, filter: *FilterHK}
  - {name: 🚥Taiwan, <<: *FallBack, filter: *FilterTW}
  - {name: 🚥Japan, <<: *FallBack, filter: *FilterJP}
  - {name: 🚥Korean, <<: *FallBack, filter: *FilterKR}
  - {name: 🚥New country, <<: *FallBack, filter: *FilterSG}
  - {name: 🚥US, <<: *FallBack, filter: *FilterUS}
  - {name: 🚥UK, <<: *FallBack, filter: *FilterUK}
  - {name: 🚥French, <<: *FallBack, filter: *FilterFR}
  - {name: 🚥German, <<: *FallBack, filter: *FilterDE}

# 负载均衡策略组
  - {name: 🎛Hong Kong, <<: *LoadBalance, filter: *FilterHK}
  - {name: 🎛Taiwan, <<: *LoadBalance, filter: *FilterTW}
  - {name: 🎛Japan, <<: *LoadBalance, filter: *FilterJP}
  - {name: 🎛Korean, <<: *LoadBalance, filter: *FilterKR}
  - {name: 🎛New country, <<: *LoadBalance, filter: *FilterSG}
  - {name: 🎛US, <<: *LoadBalance, filter: *FilterUS}
  - {name: 🎛UK, <<: *LoadBalance, filter: *FilterUK}
  - {name: 🎛French, <<: *LoadBalance, filter: *FilterFR}
  - {name: 🎛German, <<: *LoadBalance, filter: *FilterDE}

# 订阅规则
rule-providers:
  Lan:
    <<: *RuleSet
    path: './RuleSet/Lan.yaml'
    url: 'https://gitlab.com/lodepuly/proxy_tool_resources/-/raw/master/rule/Clash/Lan/Lan.yaml'

  Direct:
    <<: *RuleSet
    path: './RuleSet/Direct.yaml'
    url: 'https://raw.githubusercontent.com/luestr/ProxyResource/main/Tool/Clash/Rule/Direct.yaml'

  Proxy:
    <<: *RuleSet
    path: './RuleSet/Proxy.yaml'
    url: 'https://raw.githubusercontent.com/luestr/ProxyResource/main/Tool/Clash/Rule/Proxy.yaml'


# 规则指向
rules:
  - RULE-SET, Lan, DIRECT
  - RULE-SET, Direct, DIRECT
  - RULE-SET, Proxy, line
  - GEOIP, CN, DIRECT
  - MATCH, line
